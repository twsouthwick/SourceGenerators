// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System.CodeDom.Compiler;

namespace Swick.Features.Generator;

public static class TextWriterExtensions
{
    public static void WriteFileHeader(this TextWriter writer)
    {
        writer.WriteLine("// <auto-generated/>");
        writer.WriteLine();
        writer.WriteLine("#nullable enable");
        writer.WriteLine();
    }

    public static void WriteLineNoTabs(this IndentedTextWriter writer) => writer.WriteLineNoTabs(string.Empty);

    public static Indentation AddBlock(this IndentedTextWriter writer, BlockOptions? options = null)
    {
        writer.WriteLine("{");
        var finalText = options?.FinalText is null ? "}" : options.FinalText + "}";

        return new(writer, options is null ? new() { FinalText = finalText } : options with { FinalText = finalText });
    }

    public readonly struct Indentation : IDisposable
    {
        private static readonly BlockOptions _defaultOptions = new();

        private readonly IndentedTextWriter _writer;
        private readonly BlockOptions _options;

        public Indentation(IndentedTextWriter writer, BlockOptions? options = null)
        {
            _writer = writer;
            _writer.Indent++;
            _options = options ?? _defaultOptions;
        }

        public void Dispose()
        {
            _writer.Indent--;

            if (_options.AddNewLineBeforeClosing)
            {
                _writer.WriteLine();
            }

            if (_options.FinalText is not null)
            {
                _writer.Write(_options.FinalText);

                if (_options.IncludeSemiColon)
                {
                    _writer.Write(";");
                }
            }

            if (_options.IncludeTrailingNewline)
            {
                _writer.WriteLine();
            }
        }
    }

    public record BlockOptions
    {
        public bool IncludeSemiColon { get; init; }

        public string? FinalText { get; init; }

        public bool AddNewLineBeforeClosing { get; internal set; }

        public bool IncludeTrailingNewline { get; init; } = true;
    }
}
